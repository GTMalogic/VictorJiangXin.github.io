<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiangxin&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/9d3fdbd6c9ddbfc1e23f003190a28e81</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://victorjiangxin.github.io/"/>
  <updated>2018-08-15T12:32:30.000Z</updated>
  <id>http://victorjiangxin.github.io/</id>
  
  <author>
    <name>JiangXin</name>
    <email>jaingxin.hust@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python3安装pymssql</title>
    <link href="http://victorjiangxin.github.io//python3-install-pymssql/"/>
    <id>http://victorjiangxin.github.io//python3-install-pymssql/</id>
    <published>2018-07-22T10:57:46.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h1><p>由于在做项目中，需要通过python操作SQL Server数据库，在查看相关资料后，发现可以使用pymssql包，对数据库进行操作。本人使用的Python版本为3.5，查阅多种资料，都是推荐使用 <code>pip install pymssql</code> 但是，每次安装的时候，都出现错误，后来又尝试直接从pypi.org网站下载pymssql的包进行安装，进入相关包的路径后，输入<code>python setup.py install</code>但是仍旧是一堆错误。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在查看各种博客后，最终找到了解决方法。在微软的帖子里 <a href="https://docs.microsoft.com/en-us/sql/connect/python/pymssql/step-1-configure-development-environment-for-pymssql-python-development?view=sql-server-2017]" target="_blank" rel="noopener">微软的SQL帮助</a>核心原因是，pip安装的程序需要再专门的网站里下载，即要下载对应版本的数据。<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql" target="_blank" rel="noopener">下载地址</a> 我是python3.5,64位，因此下载了 <code>pymssql‑2.1.4.dev5‑cp35‑cp35m‑win_amd64.whl</code> 然后进入下载的文件夹，运行指令 <code>pip install pymssql‑2.1.4.dev5‑cp35‑cp35m‑win_amd64.whl</code>从而成功安装。问题顺利解决 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;提要&quot;&gt;&lt;a href=&quot;#提要&quot; class=&quot;headerlink&quot; title=&quot;提要&quot;&gt;&lt;/a&gt;提要&lt;/h1&gt;&lt;p&gt;由于在做项目中，需要通过python操作SQL Server数据库，在查看相关资料后，发现可以使用pymssql包，对数据库进行操作。本人使
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://victorjiangxin.github.io/tags/python/"/>
    
      <category term="pymssql" scheme="http://victorjiangxin.github.io/tags/pymssql/"/>
    
  </entry>
  
  <entry>
    <title>通过geth Json-Rpc接口遇到的坑</title>
    <link href="http://victorjiangxin.github.io//etheStudy/"/>
    <id>http://victorjiangxin.github.io//etheStudy/</id>
    <published>2018-07-19T08:18:48.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python访问Geth遇到的问题"><a href="#使用Python访问Geth遇到的问题" class="headerlink" title="使用Python访问Geth遇到的问题"></a>使用Python访问Geth遇到的问题</h1><p>在使用python对Geth提供的Json-RPC服务器进行访问时，一直返回由于目标计算机积极拒接、无法连接的错误，因此作出以下尝试：</p><ol><li>使用python访问百度等官方网站，经测试，可以访问，说明当前配置无问题，问题出现在服务器端。</li><li>进入服务器，用netstat | grep 8545查看相关端口状态，发现端口一直处于Stopped状态。geth无法正常运行。经检测是磁盘空间不足，Geth数据无法同步，导致Geth运行失败，停止尝试。将.ethereum文件夹全部删除，重新运行geth –rpc，发现8545端口正常运行。</li><li>geth虽然端口正常运行，但是python仍旧无法去访问JsonRPC服务器。于是运行另一种geth命令。 geth –rpc –rpcaddr 10.21.41.1 –rpcport 8545。运行后，python能够从geth客户端获取信息问题解决。</li><li>问题原因，一开始访问 (ethereum JSONRPC的WIKI)[<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC]里面提供了两种运行命令：" target="_blank" rel="noopener">https://github.com/ethereum/wiki/wiki/JSON-RPC]里面提供了两种运行命令：</a><br><code>geth --rpc</code><br>该种默认rpcaddr是localhost.rpcport是8545。<br><code>geth --rpc --rpcaddr &lt;xx&gt; --rpcport &lt;port&gt;</code><br>该种情况是定义了IP和端口号，我以为localhost应该就是服务器的内网IP即 10.21.41.1但是，实际python访问是不行的，必须定义好rpcaddr，定义它为geth所在服务器的IP地址，从而才可以访问。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Python访问Geth遇到的问题&quot;&gt;&lt;a href=&quot;#使用Python访问Geth遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;使用Python访问Geth遇到的问题&quot;&gt;&lt;/a&gt;使用Python访问Geth遇到的问题&lt;/h1&gt;&lt;p&gt;在使
      
    
    </summary>
    
      <category term="区块链技术" scheme="http://victorjiangxin.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="以太坊" scheme="http://victorjiangxin.github.io/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="Geth" scheme="http://victorjiangxin.github.io/tags/Geth/"/>
    
      <category term="Json-RPC" scheme="http://victorjiangxin.github.io/tags/Json-RPC/"/>
    
  </entry>
  
  <entry>
    <title>HunterCatchRabbits</title>
    <link href="http://victorjiangxin.github.io//HunterCatchRabbits/"/>
    <id>http://victorjiangxin.github.io//HunterCatchRabbits/</id>
    <published>2018-07-18T02:00:22.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><pre><code>假设卧底和特工有n个接头地点，编号为0和n-1。卧底每天晚上仅能换到相邻的接头地点，而特工每天白天在一个接头地点检查。特工告诉你每天检查的接头地点的编号，希望你分析一下是否一定能与卧底碰头。</code></pre><h1 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h1><pre><code>首先输入n和k（n&lt;100,k&lt;1000），分别表示接头地点的个数和特工检查的天数；接下来输入k个整数，表示特工每天检查的接头地点的编号。</code></pre><h1 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h1><pre><code>如果一定能与卧底碰头，输出Yes，否则输出No。</code></pre><h1 id="测试用例："><a href="#测试用例：" class="headerlink" title="测试用例："></a>测试用例：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 6</span><br><span class="line">1 2 3 3 2 1</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码:"></a>测试代码:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">bool canCatchRibbit(vector&lt;int&gt; holeNums, vector&lt;int&gt; checked)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int k = holeNums.size();</span><br><span class="line">int n = checked.size();</span><br><span class="line">bool flag = true;</span><br><span class="line">int cnt = n;  //  cnt为兔子能待的洞的个数，初试化为所有洞的个数</span><br><span class="line">for (int i = 0; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">int holeNum = holeNums[i] - 1; //  holeNum为洞的编号在vector中的序号，</span><br><span class="line">                               //  如：编号为1的洞在vector里面存的是0</span><br><span class="line">if (checked[holeNum] == 1)</span><br><span class="line">&#123;</span><br><span class="line">checked[holeNum] = 0;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line">if (cnt == 0)   //  如果兔子能待的洞的个数为0，则兔子肯定会被逮住</span><br><span class="line">&#123;</span><br><span class="line">flag = false;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">for (int j = 0; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">if (checked[j] == 1)</span><br><span class="line">&#123;</span><br><span class="line">checked[j] = 0;</span><br><span class="line">cnt--;</span><br><span class="line">if (j&gt;0 &amp;&amp; checked[j - 1] == 0)</span><br><span class="line">&#123;</span><br><span class="line">checked[j - 1] = 1;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">if (j &lt; n - 1 &amp;&amp; checked[j + 1] == 0)</span><br><span class="line">&#123;</span><br><span class="line">checked[j + 1] = 1;</span><br><span class="line">cnt++;</span><br><span class="line">j++;  //原来值为0的洞现在为1后是不能往相邻的洞跳，故继续检查下一个洞</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return flag;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n, k;  //  n为洞的个数，k为检查的天数</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">vector &lt;int&gt; holeNums(k, 0);  //  holeNums为每天检查的洞的编号</span><br><span class="line">for (auto &amp;m : holeNums)</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">vector&lt;int&gt; checked(n, 1);  //  checked为每天检查的洞中是否有兔子,可能有兔子则值为1，</span><br><span class="line">                            //  一定没兔子则值为0，全部初始化为1；</span><br><span class="line">bool flag = canCatchRibbit(holeNums, checked);</span><br><span class="line">if (!flag)</span><br><span class="line">cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;</span><br><span class="line">else</span><br><span class="line">cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;假设卧底和特工有n个接头地点，编号为0和n-1。卧底每天晚上仅能换到相邻的接头地点，而特工每天白天在
      
    
    </summary>
    
    
      <category term="算法" scheme="http://victorjiangxin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux文件编程</title>
    <link href="http://victorjiangxin.github.io//linux%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B/"/>
    <id>http://victorjiangxin.github.io//linux文件编程/</id>
    <published>2018-04-25T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Linux系统讲所有设备都当作文件来处理，因此Linux文件编程极其重要！<br>linux文件编程设计到文件的读、写定位等各种操作。其中对文件的操作都只能由内核态完成，用户态想要访问文件只能通过系统调用。<br>Linux文件编程中，最重要的一个概念便是文件描述符fd，所有文件的操作都通过文件描述符进行，每个文件对应一个文件描述符。<br>打开现存文件或新建文件时，内核会返回一个文件描述符，读写文件也需要使用文件描述符。  </p><h1 id="需要添加的函数库"><a href="#需要添加的函数库" class="headerlink" title="需要添加的函数库"></a>需要添加的函数库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;fcntl.h&gt;//文件控制选项头文件</span><br><span class="line">#include &lt;unistd.h&gt; //针对系统调用封装</span><br><span class="line">#include &lt;sys/type.h&gt;</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="open-打开文件"><a href="#open-打开文件" class="headerlink" title="open 打开文件"></a>open 打开文件</h2><p>函数原型： <code>int open(char *name, int how)</code><br>功能： 打开一个文件</p><ul><li>name: 文件名</li><li>how: 文件操作限制<ul><li>O_RDONLY 只读</li><li>O_WRONLY 只写</li><li>O_RDWR 读写  </li></ul></li><li>return <ul><li>-1: 打开失败</li><li>非零: 对应的文件描述符  </li></ul></li></ul><h2 id="create-创建文件"><a href="#create-创建文件" class="headerlink" title="create 创建文件"></a>create 创建文件</h2><p>函数原型： <code>int fd = create(char *filename, mode_t mode)</code><br>功能： 创建一个文件，如果源文件存在，则讲该文件清空</p><ul><li>filename： 文件名</li><li>mode: 访问模式<ul><li>COPYMODE</li></ul></li><li>return<ul><li>-1: 打开失败</li><li>非零: 成功创建</li></ul></li></ul><h2 id="read-读数据"><a href="#read-读数据" class="headerlink" title="read 读数据"></a>read 读数据</h2><p>函数原型: <code>ssize_t read(int fd, void *buf, size_t qty)</code><br>功能： 读取qty长度的数据到缓存buf中</p><ul><li>fd: 所读文件的文件描述符</li><li>buf: 缓存</li><li>qty: 读取文件的长度</li><li>return:<ul><li>-1: 读取错误</li><li>非零: 读取的长度</li></ul></li></ul><h2 id="write-写数据"><a href="#write-写数据" class="headerlink" title="write 写数据"></a>write 写数据</h2><p>函数原型： <code>ssize_t write(int fd, void *buf, size_t amt)</code><br>功能： 将buf中数据写入文件中</p><ul><li>fd: 所写文件的文件描述符</li><li>buf: 缓存</li><li>amt: 写进文件的长度</li><li>return:<ul><li>-1: 读取错误</li><li>非零: 写入的长度</li></ul></li></ul><h2 id="lseek-定位文件指针"><a href="#lseek-定位文件指针" class="headerlink" title="lseek 定位文件指针"></a>lseek 定位文件指针</h2><p>函数原型： <code>off_t lseek(int fd, off_t dist, int base)</code><br>功能： 将文件指针定位到制定位置</p><ul><li>fd: 操作的文件描述符</li><li>dist: 相对基位置的偏移量</li><li>base: 基位置<ul><li>SEEK_SET 文件的开始</li><li>SEEK_CUR 当前位置</li><li>SEEK_END 文件结尾</li></ul></li><li>return<ul><li>-1: 错误</li><li>其他： 指针变化前的位置</li></ul></li></ul><h2 id="close-关闭文件"><a href="#close-关闭文件" class="headerlink" title="close 关闭文件"></a>close 关闭文件</h2><p>函数原型： <code>int close(int fd)</code><br>功能： 关闭文件</p><ul><li>fd: 需要关闭的文件</li><li>return<ul><li>-1: 错误</li><li>0: 关闭正确</li></ul></li></ul><h1 id="处理系统调用中的错误"><a href="#处理系统调用中的错误" class="headerlink" title="处理系统调用中的错误"></a>处理系统调用中的错误</h1><h2 id="errno"><a href="#errno" class="headerlink" title="errno"></a>errno</h2><p>内核通过全局变量来指定系统调用的类型，每个程序可以访问到该变量。一般不用它判断系统调用错误。</p><h2 id="perror"><a href="#perror" class="headerlink" title="perror"></a>perror</h2><p>使用 <code>perror(string)</code><br>系统会自己查找调用错误的类型，并且将错误信息打印。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Linux系统讲所有设备都当作文件来处理，因此Linux文件编程极其重要！&lt;br&gt;linux文件编程设计到文件的读、写定位等各种操作。其中对
      
    
    </summary>
    
      <category term="linux学习" scheme="http://victorjiangxin.github.io/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://victorjiangxin.github.io/tags/linux/"/>
    
      <category term="文件操作" scheme="http://victorjiangxin.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>linux获取时间及Socket编程</title>
    <link href="http://victorjiangxin.github.io//linux%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E5%8F%8ASocket%E7%BC%96%E7%A8%8B/"/>
    <id>http://victorjiangxin.github.io//linux获取时间及Socket编程/</id>
    <published>2018-04-21T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何获取时间"><a href="#如何获取时间" class="headerlink" title="如何获取时间"></a>如何获取时间</h1><p>UNIX时间戳：从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。<br>UTC时间：世界协调时。以地球自转为基础的时间标准。 UTC表示方式为 年月日时分秒。</p><h2 id="获取UNIX时间戳"><a href="#获取UNIX时间戳" class="headerlink" title="获取UNIX时间戳"></a>获取UNIX时间戳</h2><p>C运行库：<code>#include &lt;sys/time.h&gt;</code><br>运行环境： C语言运行环境<br>函数： <code>gettimeofday(struct timeval* tv, struct timezone* tz)</code><br>功能： 获取当前UNIX时间戳<br>相关结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct timeval&#123;</span><br><span class="line">long tv_sec;//seconds</span><br><span class="line">long tv_usec;//microSeconds</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct timezone&#123;</span><br><span class="line">int tz_minuteswest;//diff of greenwich</span><br><span class="line">int tz_dsttime;//type of DST correction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="获取UTC时间"><a href="#获取UTC时间" class="headerlink" title="获取UTC时间"></a>获取UTC时间</h2><p>C运行库：<code>#include &lt;time.h&gt;</code><br>运行环境： C语言运行环境<br>函数1： <code>char *ctime(const time_t *timer)</code><br>功能1： 将UNIX时间戳转化成   Www Mmm dd hh:mm:ss yyyy (Mon Aug 13 08:23:14 2012)形式<br>函数2： <code>struct tm *gmtime(time_t *timer)</code><br>功能2： 将UNIX时间转化成struct tm结构。<br>相关结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct tm&#123;</span><br><span class="line">int tm_sec;</span><br><span class="line">int tm_min;</span><br><span class="line">int tm_hour;</span><br><span class="line">int tm_mday;</span><br><span class="line">int tm_mon;</span><br><span class="line">int tm_year;</span><br><span class="line">int tm_wday;</span><br><span class="line">int tm_yday;</span><br><span class="line">int tm_isdst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意： UTC时间年是以1900为参考点，记时间时需要year+1900， 时区是0时区，如果按照北京时间（东8区）需要tm_hour+8  </p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime();</span><br><span class="line">int main()&#123;</span><br><span class="line">struct tm *beijingTime;</span><br><span class="line">beijingTime = GetBeijingTime();</span><br><span class="line">printf(&quot;%d/%d/%d %2.2d:%2.2d:%2.2d\n&quot;, beijingTime-&gt;tm_year,</span><br><span class="line">beijingTime-&gt;tm_mon, beijingTime-&gt;tm_mday, beijingTime-&gt;tm_hour,</span><br><span class="line">beijingTime-&gt;tm_min, beijingTime-&gt;tm_sec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime()&#123;</span><br><span class="line">struct timeval tv;</span><br><span class="line">struct tm *BeijingTime;</span><br><span class="line">gettimeofday(&amp;tv, NULL);</span><br><span class="line">BeijingTime = gmtime((time_t*)&amp;(tv.tv_sec));</span><br><span class="line">BeijingTime-&gt;tm_year += 1900;</span><br><span class="line">BeijingTime-&gt;tm_hour += 8;</span><br><span class="line">BeijingTime-&gt;tm_mon += 1;</span><br><span class="line">return BeijingTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>包含的库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br></pre></td></tr></table></figure></p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><ul><li>创建socket <code>int socket(int domain, int type, int protocol)</code><ul><li>domain: 协议域，决定了socket的地址类型。<ul><li>AF_INET: 用于IPV4网络通信</li><li>AF_UNIX: 单一Unix系统中进程间通信</li><li>AF_INET6: 用于IPV6网络通信</li></ul></li><li>type: 制定socket类型。<ul><li>SOCK_STREAM: 流式，一般用于TCP通信</li><li>SOCK_DGRAM: 数据包式，一般用于UDP通信</li></ul></li><li>protocaol: 制定协议。 IPPROTO_TCP表示TCP协议，IPPROTO_UDP表示UDP协议，为0时自动选择type默认协议</li><li>return: -1 错误； 非负值 成功</li></ul></li><li><p>绑定socket和端口号 <code>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)</code></p><ul><li>sockfd: socket返回的套间字描述符，类似于文件描述符。</li><li><p>addr: 有个sockaddr类型数据的指针，指向的时被绑定结构变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//IPV4的sockaddr地址结构</span><br><span class="line">struct sockaddr_in&#123;</span><br><span class="line">sa_family sin_family;//协议类型，AF_INET</span><br><span class="line">in_port_t sin_port;//端口号</span><br><span class="line">struct in_addr sin_addr;//ip地址</span><br><span class="line">&#125;;</span><br><span class="line">struct in_addr&#123;</span><br><span class="line">uint32_t s_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//有关于sockaddr的相关函数</span><br><span class="line">htons() 将整形类型转换成网络字节序 比如 htons(INADDR_ANY),让系统自动获取本地IP地址</span><br><span class="line">htonl() 将长整形转换为网络字节序</span><br><span class="line">inet_pton(int af, char *str, pvoid addrbuf) 将点分十进制IP地址转换成网络字节</span><br><span class="line">af: 协议域，与socket的domain一致</span><br><span class="line">str: 要转换的地址 127.0.0.1</span><br><span class="line">addrbuf: sinaddr的指针</span><br><span class="line">inet_ntop(int af, pvoid addrbuf, char *str, size_t len) 将网络字节序转换成分十进制IO地址</span><br><span class="line">af: 协议域，与socket的domain一致</span><br><span class="line">addrbuf: sinaddr的指针</span><br><span class="line">str: 转换成的地址</span><br><span class="line">len: 字节单位长度</span><br></pre></td></tr></table></figure></li><li><p>addrlen: 地址长度</p></li></ul></li><li>监听端口号 <code>int listen(int sockfd, int backlog)</code><ul><li>sockfd: 要监听的sock描述字</li><li>backlog: socket可以排队的最大连接数</li></ul></li><li>接收用户请求 <code>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)</code><ul><li>sockfd: 服务器socket描述字</li><li>addr: 地址指针，保存用户对应的地址</li><li>addrlen： 地址长度。保存用户地址的长度</li><li>return: 一旦accept某个客户机请求成功，返回一个新的描述符，用于标识具体客户的TCP连接。</li></ul></li><li>从socket中读取字符 <code>ssize_t read(int fd, void *buf, size_t count)</code><ul><li>fd: 读取的用户对应的套间字描述字</li><li>buf: 保存接收信息的缓冲区</li><li>count: 读取的长度</li><li>return: 如果大于零表示读取的长度，返回0表示文件读取结束，小于0表示发生错误</li></ul></li><li>向socket发送信息 <code>ssize_t write(int fd, const void *buf, size_t count)</code><ul><li>fd: 发送的用户对应的套间字</li><li>buf: 缓冲区</li><li>count: 发送的信息长度</li><li>return: 如果大于零表示发送的长度，小于0表示发生错误</li></ul></li><li>关闭socket <code>int close(int fd)</code><ul><li>fd: accept返回的连接描述字，每个连接有一个，生命周期为连接周期。</li><li>ps: sockfd是监听描述字，一个服务器只有一个，用于监听是否有连接；fd是连接描述字，用于每个连接的操作。<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2></li></ul></li><li>创建socket <code>int socket(int domain, int type, int protocol)</code><ul><li>domain: 协议域，决定了socket的地址类型。<ul><li>AF_INET: 用于IPV4网络通信</li><li>AF_UNIX: 单一Unix系统中进程间通信</li><li>AF_INET6: 用于IPV6网络通信</li></ul></li><li>type: 制定socket类型。<ul><li>SOCK_STREAM: 流式，一般用于TCP通信</li><li>SOCK_DGRAM: 数据包式，一般用于UDP通信</li></ul></li><li>protocaol: 制定协议。 IPPROTO_TCP表示TCP协议，IPPROTO_UDP表示UDP协议，为0时自动选择type默认协议</li><li>return: -1 错误； 非负值 成功</li></ul></li><li>连接指定服务器 <code>int connect(int sockfd, struct sockaddr *addr, socklen_t addrlen)</code><ul><li>sockfd：客户端的sock描述字</li><li>addr: 服务器的地址</li><li>addrlen: socket地址长度</li></ul></li><li>向socket发送信息 <code>ssize_t write(int fd, const void *buf, size_t count)</code><ul><li>fd: 发送的用户对应的套间字</li><li>buf: 缓冲区</li><li>count: 发送的信息长度</li><li>return: 如果大于零表示发送的长度，小于0表示发生错误</li></ul></li><li>关闭socket <code>int close(int fd)</code><ul><li>fd: accept返回的连接描述字，每个连接有一个，生命周期为连接周期。</li></ul></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>客户端连接服务器，服务器向客户端发送当地时间，客户端接收并显示。<br>服务器端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#define DEFAULT_PORT 6666</span><br><span class="line">#define BUF_LEN 128</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime();</span><br><span class="line">int main()&#123;</span><br><span class="line">int SocketServer;</span><br><span class="line">struct sockaddr_in ServerAddr;</span><br><span class="line">char Buf[BUF_LEN];</span><br><span class="line"></span><br><span class="line">//create socket</span><br><span class="line">if((SocketServer = socket(AF_INET, SOCK_STREAM, 0)) == -1)&#123;</span><br><span class="line">printf(&quot;create socket error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//create addr</span><br><span class="line">memset((char*)&amp;ServerAddr, 0, sizeof(ServerAddr));</span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">ServerAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">ServerAddr.sin_port = htons(DEFAULT_PORT);</span><br><span class="line"></span><br><span class="line">//bind the socket with address</span><br><span class="line">if(bind(SocketServer, (struct sockaddr*)&amp;ServerAddr, sizeof(ServerAddr)) == -1)&#123;</span><br><span class="line">printf(&quot;bind socket with addr fail!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//listen</span><br><span class="line">if(listen(SocketServer, 20) == -1)&#123;</span><br><span class="line">printf(&quot;listen error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;server: waitting for client connect.........\n&quot;);</span><br><span class="line"></span><br><span class="line">//loop for accept</span><br><span class="line">while(1)&#123;</span><br><span class="line">int SocketClient;</span><br><span class="line">struct sockaddr_in ClientAddr;</span><br><span class="line">char ClientAddrString[30];</span><br><span class="line">socklen_t ClientAddrLen;</span><br><span class="line"></span><br><span class="line">if((SocketClient = accept(SocketServer, (struct sockaddr*)&amp;ClientAddr, &amp;ClientAddrLen)) == -1)&#123;</span><br><span class="line">printf(&quot;accept socket error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">inet_ntop(AF_INET, &amp;ClientAddr.sin_addr, ClientAddrString, sizeof(ClientAddrString));</span><br><span class="line">printf(&quot;server: %s connecting .....\n&quot;, ClientAddrString);</span><br><span class="line"></span><br><span class="line">//get the time</span><br><span class="line">struct tm *beijingTime;</span><br><span class="line">beijingTime = GetBeijingTime();</span><br><span class="line">sprintf(Buf, &quot;TIME: %d/%d/%d %2.2d:%2.2d:%2.2d\n&quot;, beijingTime-&gt;tm_year,</span><br><span class="line">beijingTime-&gt;tm_mon, beijingTime-&gt;tm_mday, beijingTime-&gt;tm_hour,</span><br><span class="line">beijingTime-&gt;tm_min, beijingTime-&gt;tm_sec);</span><br><span class="line"></span><br><span class="line">//send the time </span><br><span class="line">if(write(SocketClient, Buf, strlen(Buf)) == 0)</span><br><span class="line">printf(&quot;server: send message error!\n&quot;);</span><br><span class="line"></span><br><span class="line">//close the socket connect</span><br><span class="line">close(SocketClient);</span><br><span class="line">printf(&quot;server: close the client\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">close(SocketServer);</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime()&#123;</span><br><span class="line">struct timeval tv;</span><br><span class="line">struct tm *BeijingTime;</span><br><span class="line">gettimeofday(&amp;tv, NULL);</span><br><span class="line">BeijingTime = gmtime((time_t*)&amp;(tv.tv_sec));</span><br><span class="line">BeijingTime-&gt;tm_year += 1900;</span><br><span class="line">BeijingTime-&gt;tm_hour += 8;</span><br><span class="line">BeijingTime-&gt;tm_mon += 1;</span><br><span class="line">return BeijingTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#define BUF_LEN 128</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)&#123;</span><br><span class="line">int SocketClient;</span><br><span class="line">char Buf[BUF_LEN];</span><br><span class="line">struct sockaddr_in ServerAddr;</span><br><span class="line"></span><br><span class="line">//create socket</span><br><span class="line">if((SocketClient = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)&#123;</span><br><span class="line">printf(&quot;create socket error\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//set the server&apos;s addr</span><br><span class="line">memset((char*)&amp;ServerAddr, 0, sizeof(ServerAddr));</span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">int port = atoi(argv[2]);</span><br><span class="line">ServerAddr.sin_port = htons(port);</span><br><span class="line">if(inet_pton(AF_INET, argv[1], &amp;ServerAddr.sin_addr) &lt;= 0)&#123;</span><br><span class="line">printf(&quot;inet_pton error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//connect</span><br><span class="line">if(connect(SocketClient, (struct sockaddr*)&amp;ServerAddr, sizeof(struct sockaddr)) &lt; 0)&#123;</span><br><span class="line">printf(&quot;connect error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(Buf, 0, BUF_LEN);</span><br><span class="line">//read the message from server</span><br><span class="line">if(recv(SocketClient, Buf, BUF_LEN, 0) &lt; 0)&#123;</span><br><span class="line">printf(&quot;recv error!!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;Client: recv from server-&gt; %s\n&quot;, Buf);</span><br><span class="line"></span><br><span class="line">//close socket</span><br><span class="line">close(SocketClient);</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何获取时间&quot;&gt;&lt;a href=&quot;#如何获取时间&quot; class=&quot;headerlink&quot; title=&quot;如何获取时间&quot;&gt;&lt;/a&gt;如何获取时间&lt;/h1&gt;&lt;p&gt;UNIX时间戳：从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。&lt;br&gt;UTC时间：
      
    
    </summary>
    
      <category term="linux学习" scheme="http://victorjiangxin.github.io/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://victorjiangxin.github.io/tags/linux/"/>
    
      <category term="socket" scheme="http://victorjiangxin.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>kerberos认证浅析</title>
    <link href="http://victorjiangxin.github.io//kerberos%E8%AE%A4%E8%AF%81/"/>
    <id>http://victorjiangxin.github.io//kerberos认证/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是kerberos"><a href="#什么是kerberos" class="headerlink" title="什么是kerberos"></a>什么是kerberos</h1><p>Kerberos是个用于安全认证的第三方协议，它采用了传统的共享密钥的方式，实现了在网络环境不一定保证安全的环境下，Client和Server之间的通信。</p><h1 id="kerberos协议基本原理"><a href="#kerberos协议基本原理" class="headerlink" title="kerberos协议基本原理"></a>kerberos协议基本原理</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/kerberos_0.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>A与B之间有一个密钥key(A,B)，这个密钥只有它们两者拥有。<br>当A需要向B证明它是A时，发送两条信息。<br>一条为A的用户信息的明文，另一条为使用密钥key加密过的明文信息。<br>B接收后，用密钥key进行解密，然后将解密后的信息与明文信息比较。<br>如果他们是一样的，则表明对方就是A。从而，B确认A的身份。</p><h1 id="引入KDC：key-A-B-从何而来"><a href="#引入KDC：key-A-B-从何而来" class="headerlink" title="引入KDC：key(A,B)从何而来"></a>引入KDC：key(A,B)从何而来</h1><p>为了保证认证的安全性，key(A,B)应该是有时效性的，不能是固定的。<br>因此KDC在整个认证系统中起共同信任的第三方作用。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/kerberos_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h2><ul><li>A向KDC发出申请，申请中包含了A的身份信息</li><li>KDC查询白名单，如果A存在则向A发送两条信息<ul><li>第一条为Encrypt(key(A,B), Pubkey_A)，使用A的公钥加密的key(A,B)</li><li>第二条为Encrypt(A_Info+key(A,B), Pubkey_B)，使用B的公钥加密的A_Info与key(A,B)信息</li></ul></li><li>A使用私钥对Encrypt(key(A,B), Pubkey_A)信息解密，得到key(A,B)</li><li>A开始向B进行认证申请，发送两条信息<ul><li>第一条为Encrypt(A_Info+Timestamp, key(A,B))，使用key(A,B)加密的A_Info和时间戳信息</li><li>第二条为Encrypt(A_Info+key(A,B), Pubkey_B)</li></ul></li><li>B接收到A发送的信息后：<ul><li>先用私钥解密Encrypt(A_Info+key(A,B), Pubkey_B)，得到key(A,B)</li><li>然后用Key(A,B)解码Encrypt(A_Info+Timestamp, key(A,B))，比较A_Info，相同则成功认证。<h1 id="加时间戳的目的"><a href="#加时间戳的目的" class="headerlink" title="加时间戳的目的"></a>加时间戳的目的</h1>B每次接收到A的认证信息后，如果发现时间戳与当前时间在范围外，则判定失效，保证安全<h1 id="Kerberos的优点"><a href="#Kerberos的优点" class="headerlink" title="Kerberos的优点"></a>Kerberos的优点</h1></li></ul></li><li>较高的性能。KDC参与次数少，相比较完全依赖可信赖的第三方方案比较，具有较大的性能提升</li><li>实现了双向验证</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是kerberos&quot;&gt;&lt;a href=&quot;#什么是kerberos&quot; class=&quot;headerlink&quot; title=&quot;什么是kerberos&quot;&gt;&lt;/a&gt;什么是kerberos&lt;/h1&gt;&lt;p&gt;Kerberos是个用于安全认证的第三方协议，它采用了传统的共享密钥
      
    
    </summary>
    
      <category term="计算所" scheme="http://victorjiangxin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%89%80/"/>
    
    
      <category term="密码学" scheme="http://victorjiangxin.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="kerberos认证" scheme="http://victorjiangxin.github.io/tags/kerberos%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>github使用相关</title>
    <link href="http://victorjiangxin.github.io//github%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://victorjiangxin.github.io//github使用相关/</id>
    <published>2018-04-12T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用操作及代码"><a href="#常用操作及代码" class="headerlink" title="常用操作及代码"></a>常用操作及代码</h1><ul><li><p>生成SSH key </p><ul><li>ssh -keygen -t rsa</li><li>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>  </li></ul></li><li><p>克隆版本库 git clone <url>  </url></p></li><li><p>上传文件  </p><ul><li>git add &lt;文件名，如果是全部，可以用add .&gt;  </li><li>git commit -m “文件描述”  </li><li>git push origin master （把本地代码推送到远程master分支）</li><li>git pull -u origin master (把远程代码拉下，保证代码同步)  </li></ul></li><li><p>将本地项目与Github上的一个项目进行关联。先切换到目的目录，执行下面命令,把远程仓库的名字命名为origin<br><code>git remote add origin git@github.com:&lt;USERNAME&gt;/&lt;User.resource&gt;.git</code>  </p></li><li>提交项目前，注意！！！一定要先设置用户名与邮箱  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git config —global user.name &quot;&lt;your name&gt;&quot;</span><br><span class="line">git config —global user.email &quot;&lt;your email&gt;&quot;</span><br><span class="line">```  </span><br><span class="line">* 创建分支  </span><br><span class="line">`git checkout -b &lt;branch name&gt;`  </span><br><span class="line"></span><br><span class="line"># 本地已有版本库，要推送至Github</span><br><span class="line">首先，Github上已有一个Repository, `git@github.com:VictoryJiangXin/mShell.git`</span><br><span class="line">然后，进入目录，比如f:\mShell</span><br><span class="line">然后命令步骤如下：</span><br></pre></td></tr></table></figure></li></ul><p>git init<br>git remote add &lt;Repository’s name&gt; <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:VictoryJiangXin/mShell.git<br>git add <the file="" you="" need=""><br>git commit -m “<the description="" of="" commit="">“<br>git push -u &lt;Repository’s name&gt; master<br><code>`</code></the></the></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用操作及代码&quot;&gt;&lt;a href=&quot;#常用操作及代码&quot; class=&quot;headerlink&quot; title=&quot;常用操作及代码&quot;&gt;&lt;/a&gt;常用操作及代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;生成SSH key &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh -keygen -t rs
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Github" scheme="http://victorjiangxin.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>开源代码License</title>
    <link href="http://victorjiangxin.github.io//GithubLicense%E7%9B%B8%E5%85%B3/"/>
    <id>http://victorjiangxin.github.io//GithubLicense相关/</id>
    <published>2018-04-10T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>开源代码有个很重要的文件，License这涉及到制作者的知识产权，因此特查看相关博客。<br>下面一张图进行说明。图片来源：阮一峰 老师博客<br><img src="/img/Github_License.png" alt="License简单说明"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h1&gt;&lt;p&gt;开源代码有个很重要的文件，License这涉及到制作者的知识产权，因此特查看相关博客。&lt;br&gt;下面一张图进行说明。图片来源：阮一峰 老师博客
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Github" scheme="http://victorjiangxin.github.io/tags/Github/"/>
    
      <category term="开源许可证" scheme="http://victorjiangxin.github.io/tags/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>SqlServer使用</title>
    <link href="http://victorjiangxin.github.io//SqlServer%E4%BD%BF%E7%94%A8/"/>
    <id>http://victorjiangxin.github.io//SqlServer使用/</id>
    <published>2018-04-10T07:01:52.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sql-Server相关"><a href="#Sql-Server相关" class="headerlink" title="Sql Server相关"></a>Sql Server相关</h1><p>在使用Sql Server进行存储时，碰到两个巨大的坑！  </p><ul><li>一个就是关于数据库版本的问题，SQL Server在WIN7系统上无法运行2017的版本，智能运行2014的版本。  </li><li>一个就是SQL Server的自身版本问题，SQL Server有两种，一种是EXPRESS版，它最多只能存储10G的数据，一种是企业版，它能存储不限量的数据。</li></ul><h1 id="SSMS连接SQL-Server数据库"><a href="#SSMS连接SQL-Server数据库" class="headerlink" title="SSMS连接SQL Server数据库"></a>SSMS连接SQL Server数据库</h1><p>在使用SQL Server时，我们常常使用SSMS操作数据库，对数据库进行可视化的操作。在使用SSMS操作数据库时，首先要进行数据库连接<br>我的数据库是默认安装的，命名为SQ2，但是，在填写数据库服务器名时，我填写SQ2，却一直无法连接到数据库，最后才发现，要使用localhost\SQ2作为名字，才可以进行连接！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sql-Server相关&quot;&gt;&lt;a href=&quot;#Sql-Server相关&quot; class=&quot;headerlink&quot; title=&quot;Sql Server相关&quot;&gt;&lt;/a&gt;Sql Server相关&lt;/h1&gt;&lt;p&gt;在使用Sql Server进行存储时，碰到两个巨大的坑！  
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据库" scheme="http://victorjiangxin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL Server" scheme="http://victorjiangxin.github.io/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>SQL数据库相关操作</title>
    <link href="http://victorjiangxin.github.io//%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://victorjiangxin.github.io//数据库/</id>
    <published>2018-04-03T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库定义语句"><a href="#数据库定义语句" class="headerlink" title="数据库定义语句"></a>数据库定义语句</h1><p><img src="/img/SQL_0.png" alt="">  </p><h2 id="CREAT语句-建表"><a href="#CREAT语句-建表" class="headerlink" title="CREAT语句_建表"></a>CREAT语句_建表</h2><p>CREAT语句用于创建数据库、表、视图等操作。语句格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt;(  </span><br><span class="line">&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束条件&gt;],  </span><br><span class="line">&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束条件&gt;],  </span><br><span class="line">&lt;表级完整性约束条件&gt;);</span><br></pre></td></tr></table></figure></p><p>&lt;表级完整性约束条件&gt;: 涉及一个或多个属性列的完整性约束条件<br>常用完整性约束:</p><ul><li>主码约束: PRIMARY KEY</li><li>参照完整性约束:<ul><li>唯一性约束： UNIQUE</li><li>非空值约束： NOT NULL</li><li>取值约束： CHECK</li></ul></li><li>数据类型： 在SQL Server中，有几种主要的类型——文本、数字、二进制数据和日期<ul><li>文本类型<ul><li>CHAR(size) 保持固定长度的字符串。n的取值：1-8000</li><li>VARCHAR(size) 保持可变长度的字符串。在括号中指定字符串的最大长度，最多为8000个字符，效率没CHAR高</li><li>TEXT 最多存放长度为 2^31-1 个字符的字符串</li><li>NCHAR(n) 固定长度，Unicode字符串数据。n的取值1-4000</li><li>NVARCHAR(n) 可变长度，Unicode字符串数据。n的取值范围1-4000</li><li>NTEXT 长度可变的Unicode数据，字符串最大长度为2^30-1</li></ul></li><li>数字类型<ul><li>BIT 0/1或NULL的数据类型</li><li>BIGINT 8字节存储的INT数据类型</li><li>INT 4字节存储的INT数据类型</li><li>SMALLINT 2字节存储的INT数据类型</li><li>TINYINT 1字节存储的INT数据类型</li><li>DECIMAL[(P[,S])] []表示可选择的。固定精度和小数位数，p表示精度，s表示小数位数</li><li>FLOAT[(n)] 浮点数，其中n用于存储flaot数值尾数的尾数，用于确定精度</li></ul></li><li>二进制类型<ul><li>BINARY(n) 固定长度，n的取值：1~8000</li><li>VARBINARY(n) 可变长度，最多为长度n，n的取值：1~8000</li><li>IMAGE 长度可变的二进制数据，从0到2^31-1个字节</li></ul></li><li>时间类型<ul><li>TIME 00:00:00.0000000到23:59:59:9999999</li><li>DATE 0001-01-01到9999-12-31</li><li>SMALLDATETIME 日期范围:1900-01-01到2079-06-06 时间范围:00:00:00到23:59:59</li><li>DATATIME 日期范围:1753-01-01到9999-12-31 时间范围:00:00:00到23:59:59.997</li><li>DATATIME2 日期范围:0001-01-01到9999-12-31 时间范围:00:00:00到23:59:59.9999999  </li></ul></li></ul></li></ul><p>举例：创建一个学生表，包括学号、姓名、性别、年龄及所在系。其中学号不能为空，且唯一，姓名取值也唯一。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Student(  </span><br><span class="line">StudentNumber CHAR(5) NOT NULL UNIQUE,  </span><br><span class="line">StudentName CHAR(20) UNIQUE,  </span><br><span class="line">StudentSex CHAR(1),  </span><br><span class="line">StudentAge INT,</span><br><span class="line">StudentDept CHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="CREAT语句-建索引"><a href="#CREAT语句-建索引" class="headerlink" title="CREAT语句_建索引"></a>CREAT语句_建索引</h2><p>建立索引是加快查询速度的有效手段。<br>索引建立方式：  </p><ul><li>DBMS自行建立<ul><li>PRIMARY KEY</li><li>UNIQUE  </li></ul></li><li>DBA或表的属主（建表的人）根据需要建立。  </li></ul><p>维护索引：DBMS自动完成<br>语句格式:<br><code>CREAT [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;]]...);</code> </p><p>索引可以建立在该表的一列或多列上。<br>次序表示升序或者降序表示，升序：ASC，降序：DESC。缺省值：ASC<br>UNIQUE表示索引的每一个索引值只对应唯一的数据记录。<br>CLUSTER表示要建立的索引是聚簇索引。<br>注意：如果是含重复值的属性列不能建立UNIQUE索引，<br>聚簇索引，基表中的数据也需要按指定的聚簇属性的升序或降序存放。  </p><h2 id="ALTER语句"><a href="#ALTER语句" class="headerlink" title="ALTER语句"></a>ALTER语句</h2><p>ALTER语句用于修改各表项的内容，其语句格式如下所示：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">[ADD &lt;新列名&gt; &lt;数据类型&gt; [完整性约束]]</span><br><span class="line">[DROP &lt;完整性约束名&gt;]</span><br><span class="line">[MODIFY &lt;列名&gt; &lt;数据结构&gt;];</span><br></pre></td></tr></table></figure><p>-表名：要修改的基本表<br>-ADD子句：增加新列和新的完整性约束条件<br>-DROP子句：删除指定的完整性约束条件<br>-MODIFY子句：用于修改名列名和数据类型<br>-只能间接删除属性列</p><pre><code>* 把表中要保留的列及其内容复制到一个新表中* 删除原表* 再将新表命名为原表名  </code></pre><p>-不能修改完整性约束<br>-不能为已有列增加完整性约束<br>举例：向Student表中增加“入学时间”列，其数据类型为日期型。  </p><p><code>ALTER TABLE Student ADD StudentCome DATE</code>  </p><h2 id="DROP语句"><a href="#DROP语句" class="headerlink" title="DROP语句"></a>DROP语句</h2><p>DROP语句用于删除表项，其语句格式如下所示：  </p><p><code>DROP TABLE &lt;表名&gt;;</code>  </p><p>-系统从数据字典中删去1、该基本表的描述；2、该基本表上的所有索引的描述。<br>-系统从文件中删去表中数据<br>-表上的视图仍然保留，但无法引用<br>举例：删除Student表。<br><code>DROP TABLE Student</code>  </p><h1 id="数据库操作语句"><a href="#数据库操作语句" class="headerlink" title="数据库操作语句"></a>数据库操作语句</h1><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><p>查询语句表达式如下所示:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL|DISTICT] </span><br><span class="line">&lt;目标表达式&gt;[&lt;别名&gt;]</span><br><span class="line">[,&lt;目标表达式&gt;[&lt;别名&gt;]]</span><br><span class="line">FROM &lt;表名或视图名&gt;[&lt;别名&gt;]</span><br><span class="line">[,&lt;表名或视图名&gt;[&lt;别名&gt;]]</span><br><span class="line">[WHERE &lt;条件表达式&gt;]</span><br><span class="line">[GROUP BY &lt;列名&gt;[,&lt;列名&gt;] [HAVING&lt;条件表达式&gt;]]</span><br><span class="line">[ORDER BY &lt;列名&gt;[,&lt;列名&gt;][ASC|DESC]];</span><br></pre></td></tr></table></figure><p>-SELECT子句：指定要显示的属性列<br>-FROM子句：指定查询对象（基本表或视图）<br>-WHERE字句：指定查询条件<br>-GROUP BY字句： 对查询结果按指定列的值分组，该属性列值相等的元组为一个组。通常会在每组中作用集函数。<br>-HAVING短语：筛选出满足指定条件的组<br>-ORDER BY子句：对查询结果表按指定列序的升序排序或者降序排序  </p><h3 id="WHER子句"><a href="#WHER子句" class="headerlink" title="WHER子句"></a>WHER子句</h3><p><img src="/img/SQL_1.png" alt="">  </p><ol><li>确认范围: BETWEEN…AND… / NOT BETWEEN…AND…比如  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname，Sdept，Sage</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sage BETWEEN 20 AND 23；</span><br></pre></td></tr></table></figure><ol start="2"><li><p>确认集合：IN &lt;值表&gt; NOT IN &lt;值表&gt;。&lt;值表&gt;：用逗号分隔的一组取值。比如  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname，Ssex</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept IN ( &apos;IS&apos;，&apos;MA&apos;，&apos;CS&apos; );</span><br></pre></td></tr></table></figure></li><li><p>字符串匹配：使用谓词LIKE或NOT LIKE [NOT] LIKE ‘&lt;匹配串&gt;’[ESCAPE‘&lt;换码字符&gt;‘]比如  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT  * </span><br><span class="line">FROM  Student </span><br><span class="line">WHERE Sno = &apos;95001&apos;；</span><br><span class="line"></span><br><span class="line">SELECT Sname，Sno，Ssex</span><br><span class="line">FROM Student</span><br><span class="line">WHERE  Sname LIKE ‘刘%’；</span><br><span class="line"></span><br><span class="line">SELECT Cno，Ccredit</span><br><span class="line">FROM Course</span><br><span class="line">WHERE Cname LIKE &apos;DB\_Design&apos; ESCAPE &apos;\&apos;</span><br><span class="line">使用换码字符将通配符转义为普通字符，ESCAPE换码字符</span><br></pre></td></tr></table></figure></li><li><p>涉及空值的查询：使用谓语 IS NULL 或 IS NOT NULL  </p></li></ol><h3 id="5类主要集函数"><a href="#5类主要集函数" class="headerlink" title="5类主要集函数"></a>5类主要集函数</h3><ol><li>计数<ul><li>COUNT([DISTINCT|ALL]*)</li><li>COUNT([DISTINCT|ALL]&lt;列名&gt;)  </li></ul></li><li>计算总和<ul><li>SUM([DISTINCT|ALL]&lt;列名&gt;)</li></ul></li><li>计算平均值<ul><li>AVG([DISTINCT|ALL]&lt;列名&gt;)</li></ul></li><li>求最大值<ul><li>MAX([DISTINCT|ALL]&lt;列名&gt;)</li></ul></li><li>求最小值<ul><li>MIN([DISTINCT|ALL]&lt;列名&gt;)  </li></ul></li></ol><p>-DISTINCT短语：在计算中要取消指定列中的重复值<br>-ALL短语：不取消重复值<br>-ALL为缺省值  </p><h4 id="使用集函数"><a href="#使用集函数" class="headerlink" title="使用集函数"></a>使用集函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例： </span><br><span class="line">计算1号课程的学生平均成绩。</span><br><span class="line">     SELECT AVG(Grade)</span><br><span class="line">     FROM SC</span><br><span class="line">     WHERE Cno= &apos; 1 &apos;；</span><br></pre></td></tr></table></figure><h4 id="GROUP语句与HAVING语句"><a href="#GROUP语句与HAVING语句" class="headerlink" title="GROUP语句与HAVING语句"></a>GROUP语句与HAVING语句</h4><ol><li>使用GROUP BY进行分组  <ul><li>分组方法：按指定的一列或多列值分组，值相等的为一组。</li><li>使用GROUP BY子句后，SELECT子句的列名列表中只能出现分组属性和集函数</li><li>GROUP BY子句的作用对象是查询的中间结果表。  </li></ul></li><li>使用HAVING语句筛选最终结果  <ul><li>只有满足HAVING短语语句指定条件的组才输出。</li><li>HAVING短语与WHERE子句的不同：作用对象不同。WHERE基于表，HAVING作用于组。  </li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询选修了3门以上课程的学生学号</span><br><span class="line">SELECT Sno</span><br><span class="line">FROM SC</span><br><span class="line">GROUP BY Sno</span><br><span class="line">HAVING COUNT(*) &gt;3；</span><br></pre></td></tr></table></figure><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><p>查询只涉及一个表，是一种最简单的查询操作。<br>如果需要显示所有的列，并且按照原表顺序，可用<code>SELECT *</code>子句<br>如果要消除重复的内容，可加<code>DISTICT</code>语句，比如<code>SELECT DISTICT StudentNumber</code>  </p><h3 id="连续查询"><a href="#连续查询" class="headerlink" title="连续查询"></a>连续查询</h3><p>同时涉及多个表的查询称为连接查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT Std.Sname, Std.Ssex, Sdept</span><br><span class="line">FROM   Std，StdC</span><br><span class="line">WHERE  Std.Sname = StdC.Sname   /* 连接谓词 */</span><br><span class="line">AND     Std.Ssex = StdC.Ssex /* 连接谓词 */</span><br><span class="line">AND    StdC.Cno= &apos; 2 ‘          /* 其他限定条件 */</span><br><span class="line">AND    StdC.Grade&gt;90；      /* 其他限定条件 */</span><br></pre></td></tr></table></figure></p><h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p>概述：一个SELECT-FROM-WHERE语句称为一个查询块。将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname外层查询/父查询</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sno IN</span><br><span class="line">（SELECT Sno             内层查询/子查询</span><br><span class="line">  FROM SC</span><br><span class="line">  WHERE Cno= &apos; 2 &apos;);</span><br></pre></td></tr></table></figure></p><h2 id="数据更新语句"><a href="#数据更新语句" class="headerlink" title="数据更新语句"></a>数据更新语句</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="插入单个元组"><a href="#插入单个元组" class="headerlink" title="插入单个元组"></a>插入单个元组</h4><p>功能：将新元组插入指定表中。<br>语句格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT</span><br><span class="line">INTO &lt;表名&gt; [(&lt;属性列1&gt;[，&lt;属性列2 &gt;…)]</span><br><span class="line">VALUES (&lt;常量1&gt; [，&lt;常量2&gt;]…)</span><br></pre></td></tr></table></figure></p><ol><li>INTO子句<ul><li>指定要插入数据的表名及属性列</li><li>属性列的顺序可与表定义中的顺序不一致</li><li>没有指定属性列：表示要插入的是一条完整的元组，且属性列属性与表定义中的顺序一致</li><li>指定部分属性列：插入的元组在其余属性列上取空值  </li></ul></li><li>VALUES子句<ul><li>提供的值必须与INTO子句匹配  </li></ul></li></ol><h4 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h4><p>功能：将子查询结果插入指定表中。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT </span><br><span class="line">INTO &lt;表名&gt; [(&lt;属性列1&gt; [，&lt;属性列2&gt;…  )]</span><br><span class="line">子查询:</span><br></pre></td></tr></table></figure></p><ol><li>INFO子句与上相同。</li><li>子查询  <ul><li>SELCET子句目标项必须与INFO子句匹配。  </li></ul></li></ol><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>功能： 修改指定表中满足WHERE子句条件的元组。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE  &lt;表名&gt;</span><br><span class="line">SET &lt;列名&gt;=&lt;表达式&gt;[，&lt;列名&gt;=&lt;表达式&gt;]…</span><br><span class="line">[WHERE &lt;条件&gt;]；</span><br></pre></td></tr></table></figure></p><ol><li>SET子句  <ul><li>指定要修改的方式。</li></ul></li><li>WHERE子句  <ul><li>指定要修改的元组，缺省表示要修改所有的元组。<br>示例：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE SC</span><br><span class="line">SET  Grade=0</span><br><span class="line">WHERE  &apos;CS&apos;=</span><br><span class="line">(SELETE Sdept</span><br><span class="line"> FROM  Student</span><br><span class="line"> WHERE  Student.Sno = SC.Sno)；</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>功能： 删除指定表中满足WHERE子句条件的元组。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE</span><br><span class="line">FROM &lt;表名&gt;</span><br><span class="line">[WHERE &lt;条件&gt;]；</span><br></pre></td></tr></table></figure></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h2><p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。<br>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。<br>我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。<br>注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE  VIEW  &lt;视图名&gt;  </span><br><span class="line">               [(&lt;列名&gt; [，&lt;列名&gt;]…)]</span><br><span class="line">AS  &lt;子查询&gt;</span><br><span class="line">[WITH  CHECK  OPTION]；</span><br></pre></td></tr></table></figure></p><ol><li>组成视图的属性列名或全部省略或全部指定。  <ul><li>省略视图的各个属性列名，则隐含该视图由子查询中SELECT子句目标列中的诸字段组成。  </li><li>必须明确指定组成视图的所有列名的情形。  <ul><li>某个目标列不是单纯的属性名，而是集函数或列表达式  </li><li>目标列为*  </li><li>多表连接时选出了几个同名列作为视图的字段  </li><li>需要在视图中为某个列启用新的更合适的名字  </li></ul></li></ul></li><li>子查询  <ul><li>不含ORDER BY子句和DISTINCT短语的SELECT语句  </li></ul></li><li>WITH CHECK OPTION  <ul><li>透过视图进行增删改操作时，不得破坏视图定义中的谓词条件（即子查询中的条件表达式）  </li></ul></li></ol><h1 id="JOIN语句"><a href="#JOIN语句" class="headerlink" title="JOIN语句"></a>JOIN语句</h1><p>有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join。<br>数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。<br>在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line">FROM Persons</span><br><span class="line">INNER JOIN Orders</span><br><span class="line">ON Persons.Id_P = Orders.Id_P</span><br><span class="line">ORDER BY Persons.LastName</span><br></pre></td></tr></table></figure></p><ol><li>INNER JOIN(内连接):在表中存在至少一个匹配时，INNER JOIN 关键字返回行。   </li><li>JOIN: 如果表中有至少一个匹配，则返回行。  </li><li>LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行。  </li><li>RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行。  </li><li>FULL JOIN: 只要其中一个表中存在匹配，就返回行。  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库定义语句&quot;&gt;&lt;a href=&quot;#数据库定义语句&quot; class=&quot;headerlink&quot; title=&quot;数据库定义语句&quot;&gt;&lt;/a&gt;数据库定义语句&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/SQL_0.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;h2 id=&quot;CR
      
    
    </summary>
    
      <category term="数据库" scheme="http://victorjiangxin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://victorjiangxin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL语句" scheme="http://victorjiangxin.github.io/tags/SQL%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>比特币：脚本与地址</title>
    <link href="http://victorjiangxin.github.io//bitcoininin-scriptAddr/"/>
    <id>http://victorjiangxin.github.io//bitcoininin-scriptAddr/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自: <a href="https://furrybear.github.io/%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%9A%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%9C%B0%E5%9D%80/" target="_blank" rel="noopener">https://furrybear.github.io/%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%9A%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%9C%B0%E5%9D%80/</a></p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><ul><li>非压缩式公钥65字节（04开头）</li><li>压缩式公钥33字节（02、03开头）</li><li>公钥哈希20字节</li><li>脚本哈希20字节（或者32字节，但是没有见过实例）</li><li>地址（由公钥哈希和脚本哈希组装和编码而来）<ul><li>P2PKH型：1开头，例如1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2，由公钥哈希组装和编码而来</li><li>P2SH型：3开头，例如3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy，由脚本哈希组装和编码而来<ul><li>bech32型：bc1来头，例如bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq，它是前两种地址的另一种表达格式，现在blockchain.info只在有“native witness program”的时候使用这种格式</li><li>签名七十几字节（由第二个字节决定<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bitcoinAddr.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul></li></ul></li></ul><h1 id="非隔离见证-无Marker和Flag的"><a href="#非隔离见证-无Marker和Flag的" class="headerlink" title="非隔离见证(无Marker和Flag的)"></a>非隔离见证(无Marker和Flag的)</h1><ul><li>锁定脚本：41&lt;非压缩式公钥&gt;(65bytes)AC（1开头地址）</li><li>锁定脚本(不太确定)：（P2PK型多重签名)OP_2 &lt;公钥1&gt; &lt;公钥2&gt; &lt;公钥3&gt; OP_3 CHECKMULTISIG(0xAE)（1开头地址）</li><li>锁定脚本：76A914&lt;公钥哈希&gt;(20bytes)88AC（1开头地址）</li><li>锁定脚本：76A920&lt;公钥哈希&gt;(32bytes)87AC（1开头地址）</li><li>锁定脚本：A914&lt;脚本哈希&gt;(20bytes)87（3开头地址）</li><li>锁定脚本：6A(40bytes?)（没有地址，资金锁住了）<h1 id="隔离见证交易（有marker和flag的）"><a href="#隔离见证交易（有marker和flag的）" class="headerlink" title="隔离见证交易（有marker和flag的）"></a>隔离见证交易（有marker和flag的）</h1></li><li>锁定脚本：0014&lt;哈希&gt;(20bytes)（bc1开头地址）</li><li>锁定脚本：0020&lt;哈希&gt;(32bytes)（bc1开头地址）</li><li>锁定脚本：A914&lt;脚本哈希&gt;(20bytes)87（3开头地址）</li><li>锁定脚本：A920&lt;脚本哈希&gt;(32bytes)87（3开头地址）<h1 id="非隔离见证交易"><a href="#非隔离见证交易" class="headerlink" title="非隔离见证交易"></a>非隔离见证交易</h1><h2 id="P2PKH（Pay-to-Public-Key-Hash）"><a href="#P2PKH（Pay-to-Public-Key-Hash）" class="headerlink" title="P2PKH（Pay-to-Public-Key-Hash）"></a>P2PKH（Pay-to-Public-Key-Hash）</h2><h3 id="单签名（第一种）"><a href="#单签名（第一种）" class="headerlink" title="单签名（第一种）"></a>单签名（第一种）</h3>//解锁脚本： OP_DUP OP_HASH160<br>锁定脚本：OP_DUP(0x76) OP_HASH160(0xA9) PUSHDATA20(0x14) (20bytes) OP_EQUAL(0x87) OP_CHECKSIG(0xAC)<br>举例：（书上说有这种交易，没有找到实例）<h3 id="单签名（第二种）"><a href="#单签名（第二种）" class="headerlink" title="单签名（第二种）"></a>单签名（第二种）</h3>//解锁脚本： OP_DUP OP_HASH160<br>锁定脚本：OP_DUP(0x76) OP_HASH160(0xA9) PUSHDATA20(0x14) (20bytes) OP_EQUALVERIFY(0x88) OP_CHECKSIG(0xAC)<br>交易举例：99c2f5d3f1a1c89a4afa522361c55664e7777c71b02fd66cdf4e2ba190551d11、5a4ebf66822b0b2d56bd9dc64ece0bc38ee7844a23ff1d7320a88c5fdb2ad3e2<h2 id="P2PK（Pay-to-Public-Key）"><a href="#P2PK（Pay-to-Public-Key）" class="headerlink" title="P2PK（Pay-to-Public-Key）"></a>P2PK（Pay-to-Public-Key）</h2><h3 id="单签名"><a href="#单签名" class="headerlink" title="单签名"></a>单签名</h3>锁定脚本：PUSHDATA65BYTES(0x41) &lt;非压缩式公钥&gt;(65bytes) OP_CHECKSIG(0xAC)<br>(获取公钥后需要通过HASH160获得公钥哈希)<br>这是比特币最早的锁定脚本，coinbase一般是这种形式。<br>交易举例：创世区块的交易<h3 id="多重签名"><a href="#多重签名" class="headerlink" title="多重签名"></a>多重签名</h3>锁定脚本：M PUSHDATA65(0x41) PUSHDATA65(0x41)<br>… PUSHDATA65(0x41) N OP_CHECKMULTISIG(0xAE)<br>（因为实例没有找到，这个锁定脚本形式有待验证，因为M是个操作数，但是之前没有操作码）<br>交易举例：（没找到）<h2 id="P2SH"><a href="#P2SH" class="headerlink" title="P2SH"></a>P2SH</h2>赎回脚本（2-3）：<br>OP_2(0x52)<br>OP_PUSHDATA33BYTES(0x21)&lt;压缩式公钥1&gt;<br>OP_PUSHDATA33BYTES(0x21)&lt;压缩式公钥2&gt;<br>OP_PUSHDATA33BYTES(0x21)&lt;压缩式公钥3&gt;<br>OP_3(0x53)<br>OP_CHECKMULTISIG(0xAE)<br>解锁脚本：<br>OP_PUSHDATA?BYTES<br>OP_PUSHDATA?BYTES<br>OP_PUSHDATA?BYTES &lt;赎回脚本&gt;<br>锁定脚本：<br>HASH160(0xA9)<br>PUSHDATA20(0x14) &lt;脚本哈希（赎回脚本的HASH160）&gt;(20bytes) OP_EQUAL(0x87)<br>举例：<br>txid为<code>521f7c6781ced91da6cc8eb4c64b283d2e99f98627daf8a3a0c60432d8e8f601</code>的输入<br>解锁脚本：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00//这是要注意！这是什么？？？版本号？</span><br><span class="line">OP_PUSHDATA71BYTES(0x47)</span><br><span class="line">3044022027eec2f3081b87d271e32e126c9ccb4d2c4afa7ef14f7cff644723784b720ede02203e278a13e3544bd32abe6592e4e17a7331272db4a2b780113ed24e3ca3c37f3201//签名1</span><br><span class="line">OP_PUSHDATA72BYTES(0x48)</span><br><span class="line">30450221009e450de0b27f95db02d7ab8b5943c62b8e2f50eabfb017f509684c4f58892d7802203b8640c5f17b8e6239a65f66bbb26ea952dac9d0eefffd114d97878b2ac1da4f01//签名1</span><br><span class="line">OP_PUSHDATA1(0x4c)69</span><br><span class="line">OP_2(0x52)</span><br><span class="line">OP_PUSHDATA33BYTES(0x21)</span><br><span class="line">02ca355b567bff51c9b4a1c1590e25f685f8d12273efb7f7685a50e546786d0de7//公钥1</span><br><span class="line">OP_PUSHDATA33BYTES(0x21)</span><br><span class="line">03e5fa93cffa7533c6b68906c4a9b8665f5167f3ed95b830328835ca4d39b6495f//公钥2</span><br><span class="line">OP_PUSHDATA33BYTES(0x21)</span><br><span class="line">03ee6664f625e0a44fad0ad53ae1ecdc7c7239346b81514e8f87cfd2be4f8fec21//公钥3</span><br><span class="line">OP_3(0x53) </span><br><span class="line">OP_CHECKMULTISIG(0xae)</span><br></pre></td></tr></table></figure></li></ul><p>锁定脚本：<br><code>a914d0982dd391d674f101898e8500586019e01d9aa787</code></p><h1 id="OPRETURN"><a href="#OPRETURN" class="headerlink" title="OPRETURN"></a>OPRETURN</h1><p>锁定脚本：OP_RETURN(0x6A) (40bytes?)<br>输出不能被花费。</p><h1 id="纯隔离见证交易"><a href="#纯隔离见证交易" class="headerlink" title="纯隔离见证交易"></a>纯隔离见证交易</h1><p>witness_version在witness字段内，锁定脚本必然以一个版本号开头</p><h2 id="P2WPKH（pay-to-witness-public-key-hash）"><a href="#P2WPKH（pay-to-witness-public-key-hash）" class="headerlink" title="P2WPKH（pay-to-witness-public-key-hash）"></a>P2WPKH（pay-to-witness-public-key-hash）</h2><p>witness:<br>解锁脚本: 空<br>锁定脚本: witness_version(0x00) PUSHDATA20BYTES(0x14) &lt;公钥哈希&gt;(20bytes)</p><p>交易举例：没有找到实例……</p><h2 id="P2WSH（pay-to-witness-script-hash）"><a href="#P2WSH（pay-to-witness-script-hash）" class="headerlink" title="P2WSH（pay-to-witness-script-hash）"></a>P2WSH（pay-to-witness-script-hash）</h2><p>witness: witness_version(0x00) OP_PUSHDATA?BYTES &lt;签名1&gt; OP_1 OP_PUSHDATA33BYTES &lt;压缩式公钥1&gt; OP_PUSHDATA33BYTES &lt;压缩式公钥2&gt; OP_2 OP_CHECKMULTISIG(0xAE)<br>解锁脚本: 空<br>锁定脚本1: witness_version(0x00) PUSHDATA32BYTES(0x20) &lt;脚本哈希&gt;(32bytes)<br>锁定脚本2: witness_version(0x00) PUSHDATA20BYTES(0x14) &lt;脚本哈希&gt;(20bytes)<br>锁定脚本3: witness_version(非0x00) PUSHDATA任意BYTES &lt;脚本哈希&gt;(任意bytes)<br>(注意：P2SH的脚本哈希只有20字节，这里可以20字节或者32字节，32字节是为了防碰撞)<br>交易举例：txid为<code>d38f496e1004895c52d35bfe392800024b78b40e30dd063c4728058088ea0620</code>交易的输入witness：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">04//？？</span><br><span class="line">witness_version(0x00)</span><br><span class="line">47</span><br><span class="line">304402203f87ea2cb39bf7b57f0ada40cfa7178a7b11548767d17be57e0e3a9ed818e53902202323afa3875a9917bf8227051ea5805ea5bc7a71f1ef8176884964a278aa2c2b01//签名</span><br><span class="line">47</span><br><span class="line">304402201055076d4a5284509a8c3e01abbe5e34e4fd79fe823914821bcaa7924333e0e40220495237c0d9acd7f16357de8c89e4eaab620ce5d26b810214e96272f4cf27b54e01//签名</span><br><span class="line">OP_VERIFY(0x69)</span><br><span class="line">OP_2(0x52)</span><br><span class="line">21</span><br><span class="line">0375e00eb72e29da82b89367947f29ef34afb75e8654f6ea368e0acdfd92976b7c//公钥</span><br><span class="line">21</span><br><span class="line">03a1b26313f430c4b15bb1fdce663207659d8cac749a0e53d70eff01874496feff//公钥</span><br><span class="line">21</span><br><span class="line">03c96d495bfdd5ba4145e3e046fee45e84a8a48ad05bd8dbb395c011a32cf9f880//公钥</span><br><span class="line">OP_3(0x53)</span><br><span class="line">ae</span><br></pre></td></tr></table></figure></p><h1 id="将P2WPKH和P2WSH的witness-program嵌入P2SH赎回脚本的部分"><a href="#将P2WPKH和P2WSH的witness-program嵌入P2SH赎回脚本的部分" class="headerlink" title="将P2WPKH和P2WSH的witness program嵌入P2SH赎回脚本的部分"></a>将P2WPKH和P2WSH的witness program嵌入P2SH赎回脚本的部分</h1><p>witness_version在解锁脚本内。</p><h2 id="P2WPKH-nested-in-BIP16-P2SH"><a href="#P2WPKH-nested-in-BIP16-P2SH" class="headerlink" title="P2WPKH nested in BIP16 P2SH"></a>P2WPKH nested in BIP16 P2SH</h2><p>witness:<br>解锁脚本: PUSHDATA22BYTES(0x16) witness_version(00)PUSHDATA22BYTES(0x14) &lt;公钥哈希&gt;(20bytes)<br>锁定脚本: OP_HASH160(0xA9) PUSHDATA20BYTES(0x14) &lt;脚本哈希&gt;(20bytes) OP_EQUAL(0x87)</p><p>举例：交易c420d6cf09973d4a539cb17acdc42a3a89a89e0d6e28938a37951085d8433125的输出</p><h2 id="P2WSH-nested-in-BIP16-P2SH"><a href="#P2WSH-nested-in-BIP16-P2SH" class="headerlink" title="P2WSH nested in BIP16 P2SH"></a>P2WSH nested in BIP16 P2SH</h2><p>witness:0 <1 2="" checkmultisig=""><br>解锁脚本1: PUSHDATA34BYTES(0x22) witness_version(00) PUSHDATA32BYTES(0x20) &lt;脚本哈希&gt; (32bytes)<br>解锁脚本2: PUSHDATA22BYTES(0x16) witness_version(00) PUSHDATA20BYTES(0x14) &lt;脚本哈希&gt; (20bytes)<br>锁定脚本: OP_HASH160(0xa9) OP_PUSHDATA20(0x14) <20-byte-hash> OP_EQUAL(0x87)</20-byte-hash></1></p><p>交易举例：<br><code>4967d6427b17a17e91b524e9a4f8a810182c5f9995fd07fe2eab71d9cc96ecc0</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自: &lt;a href=&quot;https://furrybear.github.io/%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%9A%E8%84%9A%E6%
      
    
    </summary>
    
      <category term="区块链" scheme="http://victorjiangxin.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="比特币脚本" scheme="http://victorjiangxin.github.io/tags/%E6%AF%94%E7%89%B9%E5%B8%81%E8%84%9A%E6%9C%AC/"/>
    
      <category term="隔离见证" scheme="http://victorjiangxin.github.io/tags/%E9%9A%94%E7%A6%BB%E8%A7%81%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>异步编程C#</title>
    <link href="http://victorjiangxin.github.io//%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>http://victorjiangxin.github.io//异步编程/</id>
    <published>2018-03-21T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Task与Thread的区别"><a href="#Task与Thread的区别" class="headerlink" title="Task与Thread的区别"></a>Task与Thread的区别</h1><p>  Thread每次运行会创建一个新的线程，线程的创建、结束带来大量的开销。<br>  Task每次运行时，会去线程池中寻找空闲的线程，将其分配使用。  </p><h1 id="Task及awit-async"><a href="#Task及awit-async" class="headerlink" title="Task及awit/async"></a>Task及awit/async</h1><p>async/await 结构可分成三部分：<br>     （1）调用方法：该方法调用异步方法，然后在异步方法执行其任务的时候继续执行；<br>     （2）异步方法：该方法异步执行工作，然后立刻返回到调用方法；<br>     （3）await 表达式：用于异步方法内部，指出需要异步执行的任务。一个异步方法可以包含多个 await 表达式（不存在 await 表达式的话 IDE 会发出警告）。  </p><h2 id="如何看异步代码？"><a href="#如何看异步代码？" class="headerlink" title="如何看异步代码？"></a>如何看异步代码？</h2><p>async定义的函数可分为以下几部分： await之前的部分；await部分；await之后的部分。<br>当主函数运行到async函数时，先运行await之前的部分，遇到await后，线程分为两部分，（此时主线程从async函数中已经返回了）一个线程在主函数中继续运行，另一线程在继续运行await函数。PS:async函数内部的执行顺序，还是不变的，严格从上往下执行，即使有多个awit关键词，仍旧执行完前一个await语句后，再执行后一个await语句。</p><h2 id="示例代码与输出"><a href="#示例代码与输出" class="headerlink" title="示例代码与输出"></a>示例代码与输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;main thread start!&quot;);</span><br><span class="line">            Task t = TestAsync();</span><br><span class="line">            Console.WriteLine(&quot;main thread end!&quot;);</span><br><span class="line">            Console.Read();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static async Task TestAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task start!&quot;);</span><br><span class="line">            await Task.Run(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;await0 start!&quot;);</span><br><span class="line">                for (int i = 0; i &lt; 500000; i++)</span><br><span class="line">                    ;</span><br><span class="line">                Console.WriteLine(&quot;await0 end!&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            await Task.Run(()=&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;awit1 start!&quot;);</span><br><span class="line">                for (int i = 0; i &lt; 5; i++)</span><br><span class="line">                    ;</span><br><span class="line">                Console.WriteLine(&quot;awit1 end!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main thread start!</span><br><span class="line">Task start!</span><br><span class="line">await0 start!</span><br><span class="line">main thread end!</span><br><span class="line">await0 end!</span><br><span class="line">awit1 start!</span><br><span class="line">awit1 end!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Task与Thread的区别&quot;&gt;&lt;a href=&quot;#Task与Thread的区别&quot; class=&quot;headerlink&quot; title=&quot;Task与Thread的区别&quot;&gt;&lt;/a&gt;Task与Thread的区别&lt;/h1&gt;&lt;p&gt;  Thread每次运行会创建一个新的线程，
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C#" scheme="http://victorjiangxin.github.io/tags/C/"/>
    
      <category term="异步编程" scheme="http://victorjiangxin.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
